


import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Check, Star, Zap, Crown, Clock, DollarSign } from "lucide-react"
import CustomRegistrationForm from "./customRegistrationForm"

interface BasePlan {
  name: string
  description: string
  price: string
  period: string
  icon: any
  popular: boolean
  features: string[]
  buttonText: string
  buttonVariant: "outline" | "default"
}

interface PayAsYouGoPlan extends BasePlan {
  originalPrice: string
  discount: string
}

const savingPlans: BasePlan[] = [
  {
    name: "Business",
    description: "Gi·∫£i ph√°p c∆° b·∫£n cho doanh nghi·ªáp v·ª´a v√† nh·ªè",
    price: "Li√™n h·ªá",
    period: "",
    icon: Zap,
    popular: false,
    features: [
      "Dashboard c∆° b·∫£n v·ªõi c√°c ch·ªâ s·ªë quan tr·ªçng",
      "Gi√°m s√°t th·ªùi gian th·ª±c 24/7",
      "B√°o c√°o t·ª± ƒë·ªông h√†ng tu·∫ßn",
      "H·ªó tr·ª£ email trong gi·ªù h√†nh ch√≠nh",
      "T√≠ch h·ª£p t·ªëi ƒëa 5 h·ªá th·ªëng",
      "L∆∞u tr·ªØ d·ªØ li·ªáu 6 th√°ng",
      "Truy c·∫≠p tr√™n web v√† mobile",
      "C·∫£nh b√°o qua email v√† SMS",
    ],
    buttonText: "B·∫Øt ƒë·∫ßu ngay",
    buttonVariant: "outline" as const,
  },
  {
    name: "Dashboard 2D",
    description: "Tr·ª±c quan h√≥a d·ªØ li·ªáu v·ªõi giao di·ªán 2D chuy√™n nghi·ªáp",
    price: "Li√™n h·ªá",
    period: "",
    icon: Star,
    popular: false,
    features: [
      "T·∫•t c·∫£ t√≠nh nƒÉng c·ªßa g√≥i Business",
      "Dashboard 2D t∆∞∆°ng t√°c v·ªõi s∆° ƒë·ªì t√≤a nh√†",
      "Tr·ª±c quan h√≥a d·ªØ li·ªáu n√¢ng cao",
      "B√°o c√°o chi ti·∫øt theo t·ª´ng khu v·ª±c",
      "H·ªó tr·ª£ 24/7 qua ƒëi·ªán tho·∫°i",
      "T√≠ch h·ª£p kh√¥ng gi·ªõi h·∫°n h·ªá th·ªëng",
      "L∆∞u tr·ªØ d·ªØ li·ªáu 2 nƒÉm",
      "API t√πy ch·ªânh cho t√≠ch h·ª£p",
      "ƒê√†o t·∫°o s·ª≠ d·ª•ng mi·ªÖn ph√≠",
      "C·∫£nh b√°o th√¥ng minh v·ªõi AI",
    ],
    buttonText: "Ch·ªçn g√≥i ph·ªï bi·∫øn",
    buttonVariant: "default" as const,
  },
  {
    name: "Dashboard 3D",
    description: "Tr·∫£i nghi·ªám t·ªëi ∆∞u v·ªõi m√¥ h√¨nh 3D sinh ƒë·ªông",
    price: "Li√™n h·ªá",
    period: "",
    icon: Crown,
    popular: true,
    features: [
      "T·∫•t c·∫£ t√≠nh nƒÉng c·ªßa g√≥i Dashboard 2D",
      "M√¥ h√¨nh 3D t√≤a nh√† t∆∞∆°ng t√°c",
      "Th·ª±c t·∫ø ·∫£o (VR) v√† th·ª±c t·∫ø tƒÉng c∆∞·ªùng (AR)",
      "M√¥ ph·ªèng t√¨nh hu·ªëng kh·∫©n c·∫•p",
      "Ph√¢n t√≠ch d·ª± ƒëo√°n v·ªõi AI/ML",
      "T√≠ch h·ª£p IoT kh√¥ng gi·ªõi h·∫°n",
      "L∆∞u tr·ªØ d·ªØ li·ªáu vƒ©nh vi·ªÖn",
      "Dedicated support manager",
      "T√πy ch·ªânh giao di·ªán theo y√™u c·∫ßu",
      "ƒê√†o t·∫°o chuy√™n s√¢u cho team",
      "SLA 99.9% uptime guarantee",
    ],
    buttonText: "Li√™n h·ªá t∆∞ v·∫•n",
    buttonVariant: "outline" as const,
  },
]

const payAsYouGoPlans: PayAsYouGoPlan[] = [
  {
    name: "G√≥i 12 th√°ng",
    description: "Ph√π h·ª£p cho d·ª± √°n ng·∫Øn h·∫°n v·ªõi linh ho·∫°t thanh to√°n",
    price: "99,000,000 VNƒê",
    period: "/12 th√°ng",
    originalPrice: "120,000,000 VNƒê",
    discount: "17%",
    icon: Clock,
    popular: false,
    features: [
      "T·∫•t c·∫£ t√≠nh nƒÉng Dashboard 2D",
      "H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7",
      "ƒê√†o t·∫°o v√† tri·ªÉn khai mi·ªÖn ph√≠",
      "C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm ƒë·ªãnh k·ª≥",
      "Backup d·ªØ li·ªáu t·ª± ƒë·ªông",
      "B√°o c√°o ph√¢n t√≠ch chi ti·∫øt",
      "T√≠ch h·ª£p API kh√¥ng gi·ªõi h·∫°n",
      "H·ªó tr·ª£ mobile app",
    ],
    buttonText: "Ch·ªçn g√≥i 12 th√°ng",
    buttonVariant: "outline" as const,
  },
  {
    name: "G√≥i 24 th√°ng",
    description: "Gi·∫£i ph√°p t·ªëi ∆∞u cho doanh nghi·ªáp trung h·∫°n",
    price: "179,000,000 VNƒê",
    period: "/24 th√°ng",
    originalPrice: "240,000,000 VNƒê",
    discount: "25%",
    icon: Star,
    popular: true,
    features: [
      "T·∫•t c·∫£ t√≠nh nƒÉng Dashboard 3D",
      "M√¥ h√¨nh 3D t∆∞∆°ng t√°c n√¢ng cao",
      "AI/ML ph√¢n t√≠ch d·ª± ƒëo√°n",
      "Dedicated support manager",
      "T√πy ch·ªânh giao di·ªán theo y√™u c·∫ßu",
      "ƒê√†o t·∫°o chuy√™n s√¢u cho team",
      "SLA 99.9% uptime",
      "∆Øu ti√™n h·ªó tr·ª£ k·ªπ thu·∫≠t",
      "B√°o c√°o executive dashboard",
      "T√≠ch h·ª£p h·ªá th·ªëng ERP/CRM",
    ],
    buttonText: "Ch·ªçn g√≥i 24 th√°ng",
    buttonVariant: "default" as const,
  },
  {
    name: "G√≥i 36 th√°ng",
    description: "Cam k·∫øt d√†i h·∫°n v·ªõi m·ª©c gi√° ∆∞u ƒë√£i t·ªët nh·∫•t",
    price: "249,000,000 VNƒê",
    period: "/36 th√°ng",
    originalPrice: "360,000,000 VNƒê",
    discount: "31%",
    icon: Crown,
    popular: false,
    features: [
      "T·∫•t c·∫£ t√≠nh nƒÉng g√≥i 24 th√°ng",
      "Th·ª±c t·∫ø ·∫£o (VR/AR) ƒë·∫ßy ƒë·ªß",
      "White-label solution",
      "Multi-tenant architecture",
      "Advanced analytics & BI",
      "Custom module development",
      "24/7 dedicated support team",
      "Quarterly business review",
      "Free system upgrades",
      "Unlimited user licenses",
      "Enterprise security features",
    ],
    buttonText: "Ch·ªçn g√≥i 36 th√°ng",
    buttonVariant: "outline" as const,
  },
]


export function PricingSection() {
  const [formOpen, setFormOpen] = useState(false)
  const [pricingMode, setPricingMode] = useState<'saving' | 'payAsYouGo'>('saving')
  const [expandedCards, setExpandedCards] = useState<{[key: number]: boolean}>({})

  const currentPlans: (BasePlan | PayAsYouGoPlan)[] = pricingMode === 'saving' ? savingPlans : payAsYouGoPlans

  const toggleFeatures = (cardIndex: number) => {
    setExpandedCards(prev => ({
      ...prev,
      [cardIndex]: !prev[cardIndex]
    }))
  }

  return (
    <section id="pricing" className="py-20 bg-gray-50/30 dark:bg-gray-900/10">
      <div className="container mx-auto px-4">
        <div className="mx-auto max-w-2xl text-center mb-16">
          <h2 className="mb-4 text-3xl font-bold tracking-tight lg:text-4xl text-balance">
            B·∫£ng gi√° d·ªãch v·ª•
          </h2>
          <p className="text-lg text-muted-foreground text-pretty mb-8">
            T·ª´ gi·∫£i ph√°p c∆° b·∫£n ƒë·∫øn m√¥ h√¨nh 3D t∆∞∆°ng t√°c, ch√∫ng t√¥i c√≥ g√≥i d·ªãch v·ª• ph√π h·ª£p cho m·ªçi quy m√¥ t√≤a nh√†
          </p>

          {/* Pricing Mode Toggle */}
          <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mb-8">
            <button
              onClick={() => setPricingMode('saving')}
              className={`group relative flex items-center justify-center px-8 py-4 rounded-xl text-base font-semibold transition-all duration-300 transform hover:scale-105 min-w-[200px] ${
                pricingMode === 'saving'
                  ? 'bg-gradient-to-r from-primary to-primary/90 text-white shadow-lg shadow-primary/25 scale-105'
                  : 'bg-white border-2 border-gray-200 text-gray-700 hover:border-primary/30 hover:text-primary shadow-md hover:shadow-lg'
              }`}
            >
              <div className="flex items-center">
                <Clock className="w-5 h-5 mr-3" />
                <div className="text-left">
                  <div className="font-bold">Mua tr·ªçn g√≥i</div>
                  <div className="text-xs opacity-80">Saving plan</div>
                </div>
              </div>
              {pricingMode === 'saving' && (
                <div className="absolute -top-2 -right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full font-medium">
                  ƒê∆∞·ª£c ch·ªçn
                </div>
              )}
            </button>
            
            <button
              onClick={() => setPricingMode('payAsYouGo')}
              className={`group relative flex items-center justify-center px-8 py-4 rounded-xl text-base font-semibold transition-all duration-300 transform hover:scale-105 min-w-[200px] ${
                pricingMode === 'payAsYouGo'
                  ? 'bg-gradient-to-r from-primary to-primary/90 text-white shadow-lg shadow-primary/25 scale-105'
                  : 'bg-white border-2 border-gray-200 text-gray-700 hover:border-primary/30 hover:text-primary shadow-md hover:shadow-lg'
              }`}
            >
              <div className="flex items-center">
                <DollarSign className="w-5 h-5 mr-3" />
                <div className="text-left">
                  <div className="font-bold">Thu√™ theo nƒÉm</div>
                  <div className="text-xs opacity-80">Pay by year</div>
                </div>
              </div>
              {pricingMode === 'payAsYouGo' && (
                <div className="absolute -top-2 -right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full font-medium">
                  ƒê∆∞·ª£c ch·ªçn
                </div>
              )}
            </button>
          </div>

          {/* Pricing Mode Description */}
          <div className="text-center mb-8 max-w-4xl mx-auto">
            {pricingMode === 'saving' ? (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p className="text-blue-800 font-medium text-base mb-2">
                  üí° Mua tr·ªçn g√≥i (Saving Plan)
                </p>
                <p className="text-blue-600 text-sm">
                  ƒê∆∞·ª£c thi·∫øt k·∫ø ph√π h·ª£p v·ªõi nhu c·∫ßu s·ª≠ d·ª•ng m√°y ch·ªß li√™n t·ª•c 24/7 - thanh to√°n tr·ªçn g√≥i theo th√°ng s·ª≠ d·ª•ng
                </p>
              </div>
            ) : (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <p className="text-green-800 font-medium text-base mb-2">
                  ‚ö° Thu√™ theo nƒÉm (Pay by year)
                </p>
                <p className="text-green-600 text-sm">
                  Ph√π h·ª£p nhu c·∫ßu linh ho·∫°t v√† duy tr√¨ h·ªó tr·ª£ kƒ© thu·∫≠t - thanh to√°n theo t·ª´ng nƒÉm c√°c g√≥i 12, 24, 36 th√°ng
                </p>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto transition-all duration-500 ease-in-out">
          {currentPlans.map((plan, index) => (
            <Card
              key={index}
              className={`relative overflow-hidden transition-all duration-300 hover:shadow-xl hover:-translate-y-2 ${
                plan.popular
                  ? "border-2 border-primary shadow-lg scale-105"
                  : "border-border/50 hover:border-primary/50"
              }`}
            >
              {plan.popular && (
                <div className="absolute top-0 left-0 right-0 bg-primary text-primary-foreground text-center py-2 text-sm font-medium">
                  T·ªëi ∆∞u nh·∫•t
                </div>
              )}

              <CardHeader className={`text-center ${plan.popular ? "pt-12" : "pt-6"}`}>
                <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-primary/10">
                  <plan.icon className="h-8 w-8 text-primary" />
                </div>
                <CardTitle className="text-2xl font-bold">{plan.name}</CardTitle>
                <CardDescription className="text-sm text-muted-foreground mt-2">{plan.description}</CardDescription>
                <div className="mt-6">
                  {pricingMode === 'payAsYouGo' && (plan as PayAsYouGoPlan).originalPrice && (
                    <div className="flex items-center justify-center gap-2 mb-2">
                      <span className="text-sm line-through text-muted-foreground">
                        {(plan as PayAsYouGoPlan).originalPrice}
                      </span>
                      {(plan as PayAsYouGoPlan).discount && (
                        <span className="bg-red-100 text-red-600 px-2 py-1 rounded-full text-xs font-medium">
                          -{(plan as PayAsYouGoPlan).discount} OFF
                        </span>
                      )}
                    </div>
                  )}
                  <div className="text-3xl font-bold text-primary">{plan.price}</div>
                  {plan.period && <div className="text-sm text-muted-foreground">{plan.period}</div>}
                </div>
              </CardHeader>

              <CardContent className="space-y-6">
                <Button className="w-full" variant={plan.buttonVariant} size="lg" onClick={() => setFormOpen(true)}>
                  {plan.buttonText}
                </Button>

                <div className="space-y-3">
                  <h4 className="font-semibold text-sm text-foreground">T√≠nh nƒÉng bao g·ªìm:</h4>
                  <ul className="space-y-2">
                    {plan.features
                      .slice(0, expandedCards[index] ? plan.features.length : 4)
                      .map((feature, featureIndex) => (
                      <li key={featureIndex} className="flex items-start space-x-3 text-sm">
                        <Check className="h-4 w-4 text-primary mt-0.5 flex-shrink-0" />
                        <span className="text-muted-foreground leading-relaxed">{feature}</span>
                      </li>
                    ))}
                  </ul>
                  
                  {plan.features.length > 4 && (
                    <button
                      onClick={() => toggleFeatures(index)}
                      className="flex items-center justify-center w-full mt-3 px-3 py-2 text-sm font-medium text-primary hover:text-primary/80 bg-primary/5 hover:bg-primary/10 rounded-lg transition-all duration-200 border border-primary/20 hover:border-primary/30"
                    >
                      {expandedCards[index] ? (
                        <>
                          <span>Thu g·ªçn</span>
                          <svg className="w-4 h-4 ml-2 transform rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </>
                      ) : (
                        <>
                          <span>Xem th√™m {plan.features.length - 4} t√≠nh nƒÉng</span>
                          <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </>
                      )}
                    </button>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="mt-16 text-center">
          <p className="text-sm text-muted-foreground mb-4">
            C·∫ßn t∆∞ v·∫•n ƒë·ªÉ ch·ªçn g√≥i ph√π h·ª£p? Li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ mi·ªÖn ph√≠
          </p>
            <div className="pt-4">
              <span className="inline-block px-4 py-2 rounded-lg bg-primary/10 text-primary font-semibold text-lg tracking-wide">
                Hotline h·ªó tr·ª£: <a href="tel:0931487231" className="underline hover:text-primary/80">0931 487 231</a>
              </span>
            </div>
        </div>
        <CustomRegistrationForm open={formOpen} onOpenChange={setFormOpen} />
      </div>
    </section>
  )
}
